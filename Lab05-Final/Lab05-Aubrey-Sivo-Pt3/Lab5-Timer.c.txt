/*
* Rochester Institute of Technology
* Department of Computer Engineering
* CMPE 460  Interfacing Digital Electronics
* LJBeato
* 1/14/2021
*
* Filename: main_timer_template.c
*/
#include <stdio.h>
#include <stdlib.h>

#include "msp.h"
#include "uart.h"
//#include "switches.h"
#include "leds.h"
#include "Timer32.h"
#include "CortexM.h"
#include "Common.h"
#include "Lab1.h"

extern uint32_t SystemCoreClock;

// these are not used by the timer
BOOLEAN g_sendData = FALSE;
uint16_t line[128];
char temp[64];
BOOLEAN flag;
BOOLEAN flag2;
int colorIndex = 0;
BYTE colors[7] = { RED, GREEN, BLUE, CYAN, MAGENTA, YELLOW, WHITE };

BOOLEAN Timer1RunningFlag = FALSE;
BOOLEAN Timer2RunningFlag = FALSE;

unsigned long MillisecondCounter = 0;
//

//  I/O interrupt pin setup
//
// DIR     SEL0/SEL1    IE    IES     Port Mode
//  0          00        0     0       Input, rising edge trigger
//  0          00        0     1       Input, falling edge trigger, interrupt
//  0          00        1     0       Input, rising edge trigger, interrupt
//  0          00        1     1       Input, falling edge trigger, interrupt
//

void Switch1_Interrupt_Init(void)
{
	// disable interrupts
	DisableInterrupts();
	// initialize the Switch as per previous lab
	Switch1_Init();
	 
	//7-0 PxIFG RW 0h Port X interrupt flag
	//0b = No interrupt is pending.
	//1b = Interrupt is pending.
	// clear flag1 (reduce possibility of extra interrupt)
	P1->IFG &= ~BIT(1);
  
	//7-0 PxIE RW 0h Port X interrupt enable
	//0b = Corresponding port interrupt disabled
	//1b = Corresponding port interrupt enabled	
	// arm interrupt on  P1.1	
	P1->IE |= BIT1; // Ensure IFG.1 = 1 <-- ARM INTERRUPT
    
	//7-0 PxIES RW Undefined Port X interrupt edge select
  //0b = PxIFG flag is set with a low-to-high transition.
  //1b = PxIFG flag is set with a high-to-low transition
	// now set the pin to cause falling edge interrupt event
	// P1.1 is falling edge event
  P1->IES |= BIT1; // Ensure IES.1 = 1 = High to low transistion
	
	// now set the pin to cause falling edge interrupt event
  NVIC_IPR8 = (NVIC_IPR8 & 0x00FFFFFF)|0x40000000; // priority 2
	
	// enable Port 1 - interrupt 35 in NVIC	
  NVIC_ISER1 = 0x00000008;  
	
	// enable interrupts  (// clear the I bit	)
  EnableInterrupts();              
	
}
void Switch2_Interrupt_Init(void)
{
	// disable interrupts
	DisableInterrupts();
	
	// initialize the Switch as per previous lab
	Switch2_Init();
	
	// now set the pin to cause falling edge interrupt event
	// P1.4 is falling edge event
  P1->IES |= BIT4; // Ensure IES.4 = 1 = High to low transistion  
  
	// clear flag4 (reduce possibility of extra interrupt)
  P1->IFG = 0; // Clear interrupts
  
	// arm interrupt on P1.4 
  P1->IE |= BIT4; // Ensure IFG.4 = 1
	
	// now set the pin to cause falling edge interrupt event
  NVIC_IPR8 = (NVIC_IPR8&0x00FFFFFF)|0x40000000; // priority 2
	
	// enable Port 1 - interrupt 35 in NVIC
  NVIC_ISER1 = 0x00000008;         
	
	// enable interrupts  (// clear the I bit	)
  EnableInterrupts();              
	
}
// PORT 1 IRQ Handler
// LJBeato
// Will be triggered if any pin on the port causes interrupt
//
// Derived From: Jonathan Valvano

void custom_delay(int x) {
	while (x > 0) {
		x--;
	}
}

void changeLED() {
	if (colorIndex == 0)
			{
			P2->OUT |= BIT0; // RED
			P2->OUT &= ~BIT1;
			P2->OUT &= ~BIT2;
			}
	else if (colorIndex == 1) 
	{
			P2->OUT &= ~BIT0; // GREEN
			P2->OUT |= BIT1;
			P2->OUT &= ~BIT2;
	}
	else if (colorIndex == 2) 
	{
			P2->OUT &= ~BIT0; // BLUE
			P2->OUT &= ~BIT1;
			P2->OUT |= BIT2;
	}
	else if (colorIndex == 3) {
			P2->OUT &= ~BIT0; // Cyan
			P2->OUT |= BIT1;
			P2->OUT |= BIT2;
	}
	else if (colorIndex == 4)
	{
			P2->OUT |= BIT0; // Magenta
			P2->OUT |= BIT1;
			P2->OUT &= ~BIT2;
	}
	else if (colorIndex == 5) 
	{
			P2->OUT |= BIT0; // Yellow
			P2->OUT &= ~BIT1;
			P2->OUT |= BIT2;
	}
	else if (colorIndex == 6) 
	{
			P2->OUT |= BIT0; // Whites
			P2->OUT |= BIT1;
			P2->OUT |= BIT2;
	}
}

void cycleLED() {
	changeLED();
	if (colorIndex == 6)
		colorIndex = 0;
	else
		colorIndex++;
}

void PORT1_IRQHandler(void)
{
	float numSeconds = 0.0;
	char temp[32];

	// First we check if it came from Switch1 ?
  if(P1->IFG & BIT1)  // we start a timer to toggle the LED1 1 second ON and 1 second OFF
	{
		// acknowledge P1.1 is pressed, by setting BIT1 to zero - remember P1.1 is switch 1
		P1->IFG &= ~BIT(1);  // clear flag, acknowledge
		// start TIMER 1 -> Enable it
		if (flag) {
			TIMER32_CONTROL1 &= ~BIT7;
			NVIC_DisableIRQ(T32_INT1_IRQn); // Disabled IRQ -> Voltage leakage while timer was on
			flag = FALSE;
			
		} else {
			TIMER32_CONTROL1 |= BIT7;
			NVIC_EnableIRQ(T32_INT1_IRQn); // Enable IRQ
			flag = TRUE;
		}

  }
	// Now check to see if it came from Switch2 ?
  if(P1->IFG & BIT4)
	{
		// acknowledge P1.4 is pressed, by setting BIT4 to zero - remember P1.4 is switch 2
		P1->IFG &= ~BIT(4);     // clear flag4, acknowledge
		if (flag2) { // If the timer was enabled
			flag2 = FALSE;
			TIMER32_2->CONTROL &= ~BIT7; // stop TIMER 2 -> Disable it
			NVIC_DisableIRQ(T32_INT2_IRQn); // Disabled IRQ -> Voltage leakage while timer was on
			P2->OUT &= ~BIT0; // Clear LED2
			P2->OUT &= ~BIT1;
			P2->OUT &= ~BIT2;
			sprintf(temp, "%li",MillisecondCounter);
			uart0_put("\r\nTime Between Switch Presses: ");
			uart0_put(temp);
			uart0_put(" miliseconds \r\n");
			MillisecondCounter = 0;
		} else { // The timer was not enabled.
			flag2 = TRUE;
			TIMER32_2->CONTROL |= BIT7; // start TIMER 2 -> Enable it
			NVIC_EnableIRQ(T32_INT2_IRQn); // Enable IRQ
			cycleLED(); // Turn on LED2 with the apporiate next color.
		}
  }
}



//
// Interrupt Service Routine for Timer32-1
//
//
//
void Timer32_1_ISR(void)
{
		P1->OUT ^= RED; // TOGGLE LED
}

//
// Interrupt Service Routine
//
//
//
void Timer32_2_ISR(void)
{
		MillisecondCounter++;
}

//
// main
//
//
int main(void){
	//initializations
	uart0_init();
	uart0_put("\r\nLab5 Timer demo\r\n");
	
	// Timer32_1 -> 0.5Hz.
	Timer32_1_Init(&Timer32_1_ISR, SystemCoreClock/2, T32DIV1); // initialize Timer A32-1;
	
	// Set the Timer32-2 to 2Hz (0.5 sec between interrupts)
	//Timer32_1_Init(&Timer32_1_ISR, SystemCoreClock/2, T32DIV1); // initialize Timer A32-1;
        
	// Setup Timer32-2 with a .001 second timeout.
	// So use DEFAULT_CLOCK_SPEED/(1/0.001) = SystemCoreClock/1000
	Timer32_2_Init(&Timer32_2_ISR, SystemCoreClock/1000, T32DIV1); // initialize Timer A32-1;
  
	TIMER32_CONTROL1 &= ~BIT7; // stop TIMER 1
	TIMER32_CONTROL2 &= ~BIT7; // stop TIMER 2
	flag2 = 0;
	colorIndex = 0;
	Switch1_Interrupt_Init();
	Switch2_Interrupt_Init();
	LED1_Init();
	LED2_Init();
	EnableInterrupts();
  while(1)
	{
    WaitForInterrupt();
  }
}
